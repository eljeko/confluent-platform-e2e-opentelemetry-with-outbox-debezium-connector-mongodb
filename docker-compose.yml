---

services:
  broker:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION}
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:9092'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:9092,CONTROLLER://broker:29093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TOOLS_LOG4J_LOGLEVEL: ERROR
      CLUSTER_ID: 'QTnB2tAgTWa1ec5wYon2jg'

  
  connect:
    image: confluentinc/cp-kafka-connect-base:${CONFLUENT_VERSION}
    hostname: connect
    container_name: connect
    ports:
      - "8083:8083"
      - "8020:8020"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:9092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components,/tmp/connect-plugins"
      CONNECT_LOG4J_LOGGERS: org.reflections=ERROR
      #OTEL BEGIN
      OTEL_SERVICE_NAME: kafka-cp-connect
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: none
      OTEL_LOGS_EXPORTER: none
      OTEL_JAVAAGENT_DEBUG: false
      OTEL_EXPORTER_OTLP_PROTOCOL: "http/protobuf"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://jaeger:4318"
      OTEL_PROPAGATORS: "tracecontext"
      OTEL_TRACES_SAMPLER: always_on
      OTEL_INSTRUMENTATION_KAFKA_ENABLED: false
      ENABLE_OTEL: true
      #OTEL_INSTRUMENTATION_COMMON_DEFAULT-ENABLED: false
      #OTEL_TRACES_SAMPLER: "traceidratio"
      #OTEL_TRACES_SAMPLER_ARG: "0.0"
      KAFKA_OPTS: "-javaagent:/etc/kafka-connect/jars/opentelemetry-javaagent-2.18.1.jar"
      #TO DEBUG JAVA-> KAFKA_OPTS: "-javaagent:/etc/kafka-connect/jars/opentelemetry-javaagent-2.18.1.jar -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8020"
      #OTLE END
    command:
      - bash
      - -c
      - |
        echo "Installing Connector"
        confluent-hub install --no-prompt  debezium/debezium-connector-mongodb:${DEBEZIUM_MONGO_CDC_SOURCE}
        #
        echo "Coping OpenTelemetry libs to core"
        cp /tmp/opentelemetry-debezium-interceptor-libs/* /etc/kafka-connect/jars/
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run &
        #
        sleep infinity
    volumes:
      - $PWD/opentelemetry-debezium-interceptor-libs/lib:/tmp/opentelemetry-debezium-interceptor-libs        

  jaeger:
    image: jaegertracing/all-in-one:1.58
    container_name: jaeger
    ports:
      - "16686:16686"    # Web UI
      - "4317:4317"      # OTLP gRPC
      - "4318:4318"      # OTLP HTTP (optional)
      - "14250:14250"    # gRPC collector
      - "14268:14268"    # HTTP collector (optional)
      - "6831:6831/udp"  # Thrift for Jaeger agent

  mongo1:
    image: mongo:7.0
    container_name: mongo
#    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27017" ]
    command: --replSet rs0 --oplogSize 128
    ports:
      - 27017:27017
    #extra_hosts:
    #  - "host.docker.internal:172.0.0.1"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - "mongo1_data:/data/db"
      - "mongo1_config:/data/configdb"

volumes:
  mongo1_data:
  mongo1_config:
